import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ProductsService } from '../../core/services/products.service';
import { Iproduct, ProductCreateRequest, ProductUpdateRequest } from '../../core/interface/iproduct';

@Component({
  selector: 'app-all-products-admin',
  imports: [CommonModule, FormsModule],
  templateUrl: './all-products-admin.component.html',
  styleUrl: './all-products-admin.component.scss'
})
export class AllProductsAdminComponent implements OnInit {
  products: Iproduct[] = [];
  filteredProducts: Iproduct[] = [];
  searchTerm: string = '';
  showCreateModal: boolean = false;
  showEditModal: boolean = false;
  showDeleteModal: boolean = false;
  selectedProduct: Iproduct | null = null;
  productToDelete: Iproduct | null = null;
  loading: boolean = false;
  errorMessage: string = '';

  // Form data for create/edit
  productForm: ProductCreateRequest = {
    productCode: '',
    name: '',
    category: '',
    imagePath: '',
    price: 0,
    minimumQuantity: 0,
    discountRate: 0
  };

  // File upload properties
  selectedFile: File | null = null;
  dragOver = false;
  imagePreview: string | null = null;

  constructor(private productsService: ProductsService) {}

  ngOnInit(): void {
    this.loadProducts();
  }

  loadProducts(): void {
    this.loading = true;
    this.productsService.getAllProducts().subscribe({
      next: (products) => {
        this.products = products;
        this.filteredProducts = products;
        this.loading = false;
      },
      error: (error) => {
        this.errorMessage = 'Error loading products: ' + error.message;
        this.loading = false;
      }
    });
  }

  searchProducts(): void {
    if (!this.searchTerm.trim()) {
      this.filteredProducts = this.products;
    } else {
      this.filteredProducts = this.products.filter(product =>
        product.productCode.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        product.name.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    }
  }

  openCreateModal(): void {
    this.productForm = {
      productCode: 'AUTO-GENERATED', // Will be auto-generated by backend
      name: '',
      category: '',
      imagePath: '',
      price: 0,
      minimumQuantity: 0,
      discountRate: 0
    };
    this.selectedFile = null;
    this.imagePreview = null;
    this.showCreateModal = true;
    this.errorMessage = '';
  }

  openEditModal(product: Iproduct): void {
    this.selectedProduct = product;
    this.productForm = {
      productCode: product.productCode,
      name: product.name,
      category: product.category,
      imagePath: product.imagePath,
      price: product.price,
      minimumQuantity: product.minimumQuantity,
      discountRate: product.discountRate
    };
    this.selectedFile = null;
    this.imagePreview = product.imagePath || null;
    this.showEditModal = true;
    this.errorMessage = '';
  }

  openDeleteModal(product: Iproduct): void {
    this.productToDelete = product;
    this.showDeleteModal = true;
  }

  closeModals(): void {
    this.showCreateModal = false;
    this.showEditModal = false;
    this.showDeleteModal = false;
    this.selectedProduct = null;
    this.productToDelete = null;
    this.selectedFile = null;
    this.imagePreview = null;
    this.dragOver = false;
    this.errorMessage = '';
  }

  createProduct(): void {
    if (!this.validateForm()) return;

    this.loading = true;
    this.productsService.createProduct(this.productForm, this.selectedFile || undefined).subscribe({
      next: (response) => {
        this.loadProducts();
        this.closeModals();
        this.loading = false;
      },
      error: (error) => {
        this.errorMessage = 'Error creating product: ' + error.message;
        this.loading = false;
      }
    });
  }

  updateProduct(): void {
    if (!this.validateForm() || !this.selectedProduct) return;

    const updateData: ProductUpdateRequest = {
      id: this.selectedProduct.id!,
      ...this.productForm
    };

    this.loading = true;
    this.productsService.updateProduct(updateData, this.selectedFile || undefined).subscribe({
      next: (response) => {
        this.loadProducts();
        this.closeModals();
        this.loading = false;
      },
      error: (error) => {
        this.errorMessage = 'Error updating product: ' + error.message;
        this.loading = false;
      }
    });
  }

  deleteProduct(): void {
    if (!this.productToDelete) return;

    this.loading = true;
    this.productsService.deleteProduct(this.productToDelete.productCode).subscribe({
      next: (response) => {
        this.loadProducts();
        this.closeModals();
        this.loading = false;
      },
      error: (error) => {
        this.errorMessage = 'Error deleting product: ' + error.message;
        this.loading = false;
      }
    });
  }

  validateForm(): boolean {
    if (!this.productForm.productCode.trim()) {
      this.errorMessage = 'Product code is required';
      return false;
    }
    if (!this.productForm.name.trim()) {
      this.errorMessage = 'Product name is required';
      return false;
    }
    if (this.productForm.price <= 0) {
      this.errorMessage = 'Price must be greater than 0';
      return false;
    }
    return true;
  }

  exportToExcel(): void {
    // Create CSV content
    const headers = ['Product Code', 'Name', 'Category', 'Price', 'Minimum Quantity', 'Discount Rate'];
    const csvContent = [
      headers.join(','),
      ...this.filteredProducts.map(product => [
        product.productCode,
        product.name,
        product.category,
        product.price,
        product.minimumQuantity,
        product.discountRate
      ].join(','))
    ].join('\n');

    // Create and download file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'products.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Drag and Drop functionality
  onDragOver(event: DragEvent): void {
    event.preventDefault();
    this.dragOver = true;
  }

  onDragLeave(event: DragEvent): void {
    event.preventDefault();
    this.dragOver = false;
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();
    this.dragOver = false;
    
    const files = event.dataTransfer?.files;
    if (files && files.length > 0) {
      this.handleFileSelect(files[0]);
    }
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      this.handleFileSelect(input.files[0]);
    }
  }

  handleFileSelect(file: File): void {
    // Validate file type
    if (!file.type.startsWith('image/')) {
      this.errorMessage = 'Please select an image file';
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      this.errorMessage = 'File size must be less than 5MB';
      return;
    }

    this.selectedFile = file;
    this.errorMessage = '';

    // Create preview
    const reader = new FileReader();
    reader.onload = (e) => {
      this.imagePreview = e.target?.result as string;
    };
    reader.readAsDataURL(file);
  }

  removeImage(): void {
    this.selectedFile = null;
    this.imagePreview = null;
    this.productForm.imagePath = '';
  }
}
